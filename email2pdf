#!/usr/bin/env python3

from datetime import datetime
from email.header import decode_header
from subprocess import Popen, PIPE
import argparse
import email
import io
import logging
import logging.handlers
import magic
import os
import os.path
import re
import sys


def main():
    parser = argparse.ArgumentParser(description="Converts emails to PDFs. " +
                                     "See https://github.com/andrewferrier/email2pdf for more information.")

    parser.add_argument("-i", "--inputFile", default="-",
                        help="Input file you wish to read. If set to '-' " +
                        "(which is the default), it reads from stdin.")

    output_options = parser.add_mutually_exclusive_group()

    output_options.add_argument("-o", "--outputFile",
                                help="Output file you wish to write to.")
    output_options.add_argument("-t", "--timedOutputFile",
                                help="Specify that email2pdf should automatically " +
                                "pick a filename based on the current date and time. " +
                                "This is the default if no output filename is specified.")

    parser.add_argument("-d", "--outputDirectory", default=os.getcwd(),
                        help="Output directory for --timedOutputFile. Defaults to the current directory.")

    parser.add_argument("--headers", dest='headers', action='store_true',
                        help="Add basic email headers to the PDF. The default is not to do this.")
    parser.set_defaults(headers=False)

    parser.add_argument('--verbose', '-v', action='count', default=0)

    args = parser.parse_args()

    if args.verbose > 1:
        sysLogHandler.setLevel(logging.DEBUG)
        sysOutHandler.setLevel(logging.DEBUG)
    elif args.verbose == 1:
        sysLogHandler.setLevel(logging.DEBUG)
        sysOutHandler.setLevel(logging.INFO)
    else:
        sysLogHandler.setLevel(logging.INFO)
        sysOutHandler.setLevel(logging.WARNING)

    output_directory = os.path.normpath(args.outputDirectory)

    if not os.path.exists(output_directory):
        raise ExitCodeException("outputDirectory does not exist.")

    if args.outputFile:
        output_file_name = args.outputFile
    else:
        output_file_name = os.path.join(output_directory, datetime.now().strftime("%Y-%m-%dT%H-%M-%S") + ".pdf")

    logger.info("Output file name is: " + output_file_name)

    if os.path.isfile(output_file_name):
        raise ExitCodeException("Output file " + output_file_name + " already exists. Aborting.")

    if args.inputFile.strip() == "-":
        data = ""
        for line in sys.stdin:
            data += line
    else:
        with open(args.inputFile, "r") as inputHandle:
            data = inputHandle.read()

    logger.debug("Email input data is: " + data)

    my_email = email.message_from_string(data)

    handle_pdf_parts(my_email, output_directory)

    if(args.headers):
        header_info = get_header_info(my_email)
    else:
        header_info = ""

    logger.debug("Header info is: " + header_info)

    part = find_part_by_content_type(my_email, "text/html")
    if part is None:
        part = find_part_by_content_type(my_email, "text/plain")
        if part is None:
            raise ExitCodeException("Cannot find an appropriate payload in email.")
        else:
            logger.info("Determined email is Text.")
            payload = part.get_payload(decode=True)
            payload = bytes("<html><body><pre>\n", 'UTF-8') + payload + bytes("\n</pre></body></html>", 'UTF-8')
    else:
        logger.info("Determined email is HTML.")
        payload = part.get_payload(decode=True)

        def cid_replace(matchobj):
            logger.debug("Looking for image for cid " + matchobj.group(1))
            imagePart = find_part_by_content_id(my_email, matchobj.group(1))
            if imagePart is not None:
                assert(imagePart['Content-Transfer-Encoding'] == 'base64')
                imageBase64 = imagePart.get_payload(decode=False)
                imageBase64 = re.sub("[\r\n\t]", "", imageBase64)
                imageDecoded = imagePart.get_payload(decode=True)
                m = magic.open(magic.MAGIC_MIME_TYPE)
                m.load()
                mimeType = m.buffer(imageDecoded)
                return "data:" + mimeType + ";base64," + imageBase64
            else:
                logger.warn("Could not find image cid " + matchobj.group(1) + " in email content.")
                return "broken"

        payload = bytes(re.sub('cid:([\w_-]+)', cid_replace, str(payload, encoding='utf-8')), 'UTF-8')

    payload = bytes(header_info, 'UTF-8') + payload

    logger.debug("Final payload before PDFing: " + str(payload, encoding='utf-8'))

    p = Popen(['wkhtmltopdf', '-q', '--load-error-handling', 'ignore', '--load-media-error-handling', 'ignore',
               '--encoding', 'utf-8', '-', output_file_name], stdin=PIPE, stdout=PIPE, stderr=PIPE)
    output, error = p.communicate(input=payload)
    if p.returncode > 0:
        raise ExitCodeException("wkhtmltopdf failed with exit code " + str(p.returncode))


def handle_pdf_parts(email, output_directory):
    parts = find_all_parts(email, "application/pdf")
    maybeParts = find_all_parts(email, "application/octet-stream")

    for maybePart in maybeParts:
        filename = extract_part_filename(maybePart)
        unused_base, ext = os.path.splitext(filename)
        if ext.lower() == '.pdf':
            parts.append(maybePart)

    for part in parts:
        filename = extract_part_filename(part)

        fullFilename = os.path.join(output_directory, filename)
        fullFilename = get_unique_version(fullFilename)

        payload = part.get_payload(decode=True)
        with open(fullFilename, 'wb') as output_file:
            output_file.write(payload)


def extract_part_filename(part):
    filename = part.get_filename()
    if decode_header(filename)[0][1] is not None:
        filename = str(decode_header(filename)[0][0]).decode(decode_header(filename)[0][1])
    return filename


def get_unique_version(filename):
    # From here: http://stackoverflow.com/q/183480/27641
    counter = 1
    file_name_parts = os.path.splitext(filename)
    while os.path.isfile(filename):
        filename = file_name_parts[0] + '_' + str(counter) + file_name_parts[1]
        counter += 1
    return filename


def find_part_by_content_type(message, content_type):
    for part in message.walk():
        if part.get_content_type() == content_type:
            return part
    return None


def find_part_by_content_id(message, content_id):
    for part in message.walk():
        if part['Content-ID'] in (content_id, '<' + content_id + '>'):
            return part
    return None


def find_all_parts(message, content_type):
    parts = []

    for part in message.walk():
        if part.get_content_type() == content_type:
            parts.append(part)

    return parts


def get_header_info(email):
    HEADERS = ('Subject', 'From', 'To', 'Date')

    header_info = ""

    for header in HEADERS:
        if(email[header]):
            header_info = header_info + '<b>' + header + '</b>: ' + email[header] + '<br/>'

    return header_info + '<br/>'

# Idea for this error handling strategy from here:
# http://stackoverflow.com/a/16787722/27641


class ExitCodeException(Exception):
    def __init__(self, message):
        self.message = message

    def __str__(self):
        return repr(self.message)

    def getExitCode(self):
        return 2


def handle_uncaught_exception(exctype, value, trace):
    if isinstance(value, ExitCodeException):
        logger.error(value.message)
        sys.exit(value.getExitCode())
    else:
        oldHook(exctype, value, trace)

sys.excepthook, oldHook = handle_uncaught_exception, sys.excepthook

# See http://stackoverflow.com/a/11111212/27641
logger = logging.getLogger('email2pdf')
logger.setLevel(logging.DEBUG)

sysLogHandler = logging.handlers.SysLogHandler(address = '/dev/log')
sysLogHandler.setLevel(logging.INFO)
sysLogFormatter = logging.Formatter('%(pathname)s[' + str(os.getpid()) + '] %(levelname)s %(lineno)s: %(message)s')
sysLogHandler.setFormatter(sysLogFormatter)
logger.addHandler(sysLogHandler)

sysOutHandler = logging.StreamHandler(stream = sys.stderr)
sysOutHandler.setLevel(logging.WARNING)
sysOutFormatter = logging.Formatter('%(levelname)s: %(message)s')
sysOutHandler.setFormatter(sysOutFormatter)
logger.addHandler(sysOutHandler)

if __name__ == "__main__":
    main()
