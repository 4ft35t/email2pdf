#!/usr/bin/env python

from __future__ import print_function

from datetime import datetime
from subprocess import Popen, PIPE
import argparse
import email
import os
import os.path
import sys

def main():
    HEADERS = ('Subject', 'From', 'To', 'Date')

    parser = argparse.ArgumentParser(description="Converts emails to PDFs. " +
            "See https://github.com/andrewferrier/email2pdf for more information.")

    parser.add_argument("-i", "--inputFile", default="-",
            help="Input file you wish to read. If set to '-' (which is the default), it reads from stdin.")

    outputOptions = parser.add_mutually_exclusive_group()

    outputOptions.add_argument("-o", "--outputFile",
            help="Output file you wish to write to.")
    outputOptions.add_argument("-t", "--timedOutputFile",
            help="Specify that email2pdf should automatically pick a filename based on the current " +
            "date and time. This is the default if not output filename is specified.")

    parser.add_argument("-d", "--outputDirectory", default=os.getcwd(),
            help="Output directory for --timedOutputFile. Defaults to the current directory.")

    args = parser.parse_args()

    if(args.outputFile):
        outputFileName = args.outputFile
    else:
        outputFileName = args.outputDirectory.rstrip("/") + "/" + datetime.now().strftime("%Y-%m-%dT%H-%M-%S") + ".pdf"

    if os.path.isfile(outputFileName):
        print("ERROR: Output file " + outputFileName + " already exists. Aborting.", file=sys.stderr)

    if args.inputFile.strip() == "-":
        data = ""
        for line in sys.stdin:
            data += line
    else:
        with open(args.inputFile, "r") as inputHandle:
            data = inputHandle.read()

    myEmail = email.message_from_string(data)

    headerInfo = ''
    for header in HEADERS:
        headerInfo = headerInfo + '<b>' + header + '</b>: ' + myEmail[header] + '<br/>'

    headerInfo = headerInfo + '<br/>'

    payload = find_depth_first(myEmail, "application/pdf")
    if payload == None:
        payload = find_depth_first(myEmail, "text/html")
        if payload == None:
            payload = find_depth_first(myEmail, "text/plain")
            if payload == None:
                print("ERROR: Cannot find an appropriate payload in email.", file=sys.stderr)
            else:
                payload = "<html><body><pre>\n" + payload + "\n</pre></body></html>"

        payload = headerInfo + payload

        p = Popen(['wkhtmltopdf', '-q', '--load-error-handling', 'ignore', '--load-media-error-handling', 'ignore', '-', outputFileName], stdin=PIPE)
        output = p.communicate(input = payload)
    else:
        with open(outputFileName, 'wb') as outputFile:
            outputFile.write(payload)

def find_depth_first(message, content_type):
    if message.is_multipart():
        for part in message.get_payload():
            value = find_depth_first(part, content_type)
            if value != None:
                return value
    elif message.get_content_type() == content_type:
        return message.get_payload(decode = True)
    else:
        return None

if __name__ == "__main__":
   main()
