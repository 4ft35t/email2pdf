#!/usr/bin/env python3

from datetime import datetime
from datetime import timedelta
from email import encoders
from email.message import Message
from email.mime.base import MIMEBase
from email.mime.image import MIMEImage
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.utils import formatdate
from reportlab.pdfgen import canvas
from subprocess import Popen, PIPE, DEVNULL

import os
import sys
import tempfile
import time
import unittest

DELAY = 0.5
DEFAULT_OUTPUT_DIR = '/tmp'

error_log = open('email2pdf_unittest_stderr.log', "w")


def touch(fname):
    open(fname, 'w').close()


class BaseTestClasses:
    class Email2PDFTestCase(unittest.TestCase):
        def setUp(self):
            self.timeAtStart = datetime.now()

        def existsByTime(self, path=DEFAULT_OUTPUT_DIR):
            # This function allows for a one-second delay between the startup of
            # the test itself and the startup of email2pdf. Anything more will
            # cause this function to return false.
            oneSecondLater = self.timeAtStart + timedelta(0, 1)
            return os.path.exists(os.path.join(path, self.timeAtStart.strftime("%Y-%m-%dT%H-%M-%S") + ".pdf")) or \
                os.path.exists(os.path.join(path, oneSecondLater.strftime("%Y-%m-%dT%H-%M-%S") + ".pdf"))

        def silentRemove(self, path):
            if(os.path.exists(path)):
                os.remove(path)

        def addHeaders(self, frm=None, to=None, subject=None):
            if(subject):
                self.msg['Subject'] = subject

            if(frm):
                self.msg['From'] = frm

            if(to):
                self.msg['To'] = to

            self.msg['Date'] = formatdate()

        def invokeEmail2PDF(self, headers=False, outputDirectory=DEFAULT_OUTPUT_DIR, errorExpected=False, outputFile=None):
            textMessage = self.msg.as_string()

            options = ['./email2pdf', '-d', outputDirectory]
            if headers:
                options.append('--headers')

            if outputFile:
                options.append('-o')
                options.append(outputFile)

            if errorExpected:
                p = Popen(options, stdin=PIPE, stderr=error_log)
            else:
                p = Popen(options, stdin=PIPE)

            output = p.communicate(input=bytes(textMessage, 'UTF-8'))
            p.wait()
            return p.returncode

        def setPlainContent(self, content):
            self.msg.set_default_type("text/plain")
            self.msg.set_payload(content)

        def attachHTML(self, content):
            self.msg.attach(MIMEText(content, 'html'))

        def attachText(self, content):
            self.msg.attach(MIMEText(content, 'plain'))

        def attachPDF(self, string, fileSuffix="pdf", mainContentType="application", subContentType="pdf"):
            unused_f_handle, file_name = tempfile.mkstemp(prefix="email2pdf_unittest_file", suffix="." + fileSuffix)

            try:
                cv = canvas.Canvas(file_name)
                cv.drawString(0, 500, string)
                cv.save()

                part = MIMEBase(mainContentType, subContentType)
                openHandle = open(file_name, "rb")
                part.set_payload(openHandle.read())
                encoders.encode_base64(part)
                part.add_header('Content-Disposition', 'attachment; filename="%s"' % os.path.basename(file_name))
                self.msg.attach(part)
                openHandle.close()

                return file_name
            finally:
                os.unlink(file_name)

        def attachImage(self, imageId):
            with open('jpeg444.jpg', 'rb') as image_file:
                image = MIMEImage(image_file.read())
                image.add_header('Content-ID', imageId)
                self.msg.attach(image)

        def tearDown(self):
            time.sleep(DELAY)


class TestBasic(BaseTestClasses.Email2PDFTestCase):
    def setUp(self):
        super(TestBasic, self).setUp()
        self.msg = Message()

    def test_noheaders(self):
        self.assertEqual(self.invokeEmail2PDF(), 0)
        self.assertTrue(self.existsByTime())

    def test_simple(self):
        self.addHeaders("From", "To", "Subject")
        self.assertEqual(self.invokeEmail2PDF(), 0)
        self.assertTrue(self.existsByTime())

    def test_nosubject(self):
        self.addHeaders("From", "To")
        self.assertEqual(self.invokeEmail2PDF(), 0)
        self.assertTrue(self.existsByTime())

    def test_plaincontent(self):
        self.addHeaders("From", "To", "Subject")
        self.setPlainContent("Hello!")
        self.assertEqual(self.invokeEmail2PDF(), 0)
        self.assertTrue(self.existsByTime())

    def test_plaincontent_headers(self):
        self.addHeaders("From", "To", "Subject")
        self.setPlainContent("Hello!")
        self.assertEqual(self.invokeEmail2PDF(headers=True), 0)
        self.assertTrue(self.existsByTime())

    def test_plaincontent_trailingslash(self):
        self.setPlainContent("Hello!")
        self.assertEqual(self.invokeEmail2PDF(outputDirectory="/tmp/"), 0)
        self.assertTrue(self.existsByTime("/tmp/"))

    def test_plaincontent_dirnotexist(self):
        self.setPlainContent("Hello!")
        self.assertNotEqual(self.invokeEmail2PDF(outputDirectory="/notexist/", errorExpected=True), 0)

    def test_plaincontent_fileexist(self):
        self.setPlainContent("Hello!")
        unused_f_handle, f_path = tempfile.mkstemp()
        try:
            self.assertNotEqual(self.invokeEmail2PDF(outputFile=f_path, errorExpected=True), 0)
        finally:
            os.unlink(f_path)


class TestMIME(BaseTestClasses.Email2PDFTestCase):
    def setUp(self):
        super(TestMIME, self).setUp()
        self.msg = MIMEMultipart()

    def test_noheaders(self):
        self.assertEqual(self.invokeEmail2PDF(), 0)
        self.assertTrue(self.existsByTime())

    def test_simple(self):
        self.addHeaders("From", "To", "Subject")
        self.assertEqual(self.invokeEmail2PDF(), 0)
        self.assertTrue(self.existsByTime())

    def test_nosubject(self):
        self.addHeaders("From", "To")
        self.assertEqual(self.invokeEmail2PDF(), 0)
        self.assertTrue(self.existsByTime())

    def test_plain(self):
        self.addHeaders("From", "To", "Subject")
        self.attachText("Some basic textual content")
        filename = self.attachPDF("Some PDF content", mainContentType="application", subContentType="octet-stream")
        self.assertEqual(self.invokeEmail2PDF(), 0)
        self.assertTrue(self.existsByTime())
        self.assertTrue(os.path.exists(filename))

    def test_html(self):
        self.addHeaders("From", "To", "Subject")
        self.attachHTML("<p>Some basic textual content</p>")
        self.assertEqual(self.invokeEmail2PDF(), 0)
        self.assertTrue(self.existsByTime())

    def test_htmlEntitiesCurrency(self):
        path = os.path.join(DEFAULT_OUTPUT_DIR, "htmlEntitiesCurrency.pdf")
        self.silentRemove(path)
        self.addHeaders("From", "To", "Subject")
        self.attachHTML(b'<span>Pounds: \xc2\xa37.14, Another Pounds: &#163;7.14</span>'.decode('utf-8'))
        self.assertEqual(self.invokeEmail2PDF(outputFile=path), 0)

    def test_plainandhtml(self):
        self.addHeaders("From", "To", "Subject")
        self.attachText("Some basic textual content")
        self.attachHTML("<p>Some basic textual content</p>")
        self.assertEqual(self.invokeEmail2PDF(), 0)
        self.assertTrue(self.existsByTime())

    def test_pdf(self):
        self.addHeaders("From", "To", "Subject")
        self.attachText("Some basic textual content")
        filename = self.attachPDF("Some PDF content")
        self.assertEqual(self.invokeEmail2PDF(), 0)
        self.assertTrue(self.existsByTime())
        self.assertTrue(os.path.exists(filename))

    def test_pdfAsOctetStream(self):
        self.addHeaders("From", "To", "Subject")
        self.attachText("Some basic textual content")
        filename = self.attachPDF("Some PDF content", mainContentType="application", subContentType="octet-stream")
        self.assertEqual(self.invokeEmail2PDF(), 0)
        self.assertTrue(self.existsByTime())
        self.assertTrue(os.path.exists(filename))

    def test_embeddedImageEmail(self):
        path = os.path.join(DEFAULT_OUTPUT_DIR, "embeddedImage.pdf")
        self.silentRemove(path)
        self.addHeaders("From", "To", "Subject")
        self.attachImage('myid')
        self.attachHTML('<img src=cid:myid>')
        self.assertEqual(self.invokeEmail2PDF(outputFile=path), 0)
        self.assertTrue(os.path.exists(path))

    def test_embeddedImageEmail2(self):
        self.addHeaders("From", "To", "Subject")
        self.attachImage('<my_id>')
        self.attachHTML('<img src=cid:my_id>')
        self.assertEqual(self.invokeEmail2PDF(), 0)
        self.assertTrue(self.existsByTime())

    def test_embeddedImageEmail3(self):
        self.addHeaders("From", "To", "Subject")
        self.attachImage('myid')
        self.attachHTML('<p><img src="blah.jpg"><li></li><img src="cid:myid"></p>')
        self.assertEqual(self.invokeEmail2PDF(), 0)
        self.assertTrue(self.existsByTime())

    def test_embeddedImageEmail4(self):
        self.addHeaders("From", "To", "Subject")
        self.attachImage('myid')
        self.attachHTML('<IMG SRC="cid:myid">')
        self.assertEqual(self.invokeEmail2PDF(), 0)
        self.assertTrue(self.existsByTime())

    def test_somethingElseAsOctetStream(self):
        self.addHeaders("From", "To", "Subject")
        self.attachText("Some basic textual content")
        filename = self.attachPDF("Some PDF content", fileSuffix="xyz", mainContentType="application",
                                  subContentType="octet-stream")
        self.assertEqual(self.invokeEmail2PDF(), 0)
        self.assertTrue(self.existsByTime())
        self.assertFalse(os.path.exists(filename))

    def test_2pdfs(self):
        self.addHeaders("From", "To", "Subject")
        self.attachText("Some basic textual content")
        filename = self.attachPDF("Some PDF content")
        filename2 = self.attachPDF("Some More PDF content")
        self.assertFalse(os.path.exists(filename))
        self.assertFalse(os.path.exists(filename2))

        self.assertEqual(self.invokeEmail2PDF(), 0)
        self.assertTrue(self.existsByTime())
        self.assertTrue(os.path.exists(filename))
        self.assertTrue(os.path.exists(filename2))

    def test_pdf_exists(self):
        self.addHeaders("From", "To", "Subject")
        self.attachText("Some basic textual content")
        filename = self.attachPDF("Some PDF content")
        self.assertFalse(os.path.exists(filename))

        touch(filename)
        self.assertEqual(self.invokeEmail2PDF(), 0)
        self.assertTrue(self.existsByTime())
        self.assertTrue(os.path.exists(filename))

        dirName, baseName = os.path.split(filename)
        rootName, unused_extension = os.path.splitext(baseName)
        uniqueName = os.path.join(dirName, rootName + "_1.pdf")

        self.assertTrue(os.path.exists(uniqueName))

    def test_2pdfs_oneexists(self):
        self.addHeaders("From", "To", "Subject")
        self.attachText("Some basic textual content")
        filename = self.attachPDF("Some PDF content")
        filename2 = self.attachPDF("Some More PDF content")
        self.assertFalse(os.path.exists(filename))
        self.assertFalse(os.path.exists(filename2))

        touch(filename)
        self.assertEqual(self.invokeEmail2PDF(), 0)
        self.assertTrue(self.existsByTime())

        self.assertTrue(os.path.exists(filename))
        dirName, baseName = os.path.split(filename)
        rootName, unused_extension = os.path.splitext(baseName)
        uniqueName = os.path.join(dirName, rootName + "_1.pdf")
        self.assertTrue(os.path.exists(uniqueName))

        self.assertTrue(os.path.exists(filename2))
        dirName2, baseName2 = os.path.split(filename2)
        rootName2, unused_extension2 = os.path.splitext(baseName2)
        uniqueName2 = os.path.join(dirName2, rootName2 + "_1.pdf")
        self.assertFalse(os.path.exists(uniqueName2))

if __name__ == '__main__':
    unittest.main()
