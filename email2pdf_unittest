#!/usr/bin/env python3

from email.message import Message
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.utils import formatdate
from subprocess import Popen, PIPE

import unittest
import sys
import time

DELAY = 0.5


def addHeaders(msg, frm=None, to=None, subject=None):
    if(subject):
        msg['Subject'] = subject

    if(frm):
        msg['From'] = frm

    if(to):
        msg['To'] = to

    msg['Date'] = formatdate()


def invokeEmail2PDF(message, headers=False):
    textMessage = message.as_string()

    options = ['./email2pdf', '-d', '/tmp']
    if headers:
        options.append('--headers')

    p = Popen(options, stdin=PIPE)
    output = p.communicate(input=bytes(textMessage, 'UTF-8'))
    p.wait()
    return p.returncode


def setPlainContent(message, content):
    message.set_default_type("text/plain")
    message.set_payload(content)


def attachHTML(message, content):
    message.attach(MIMEText(content, 'html'))


def attachText(message, content):
    message.attach(MIMEText(content, 'plain'))


class TestBasic(unittest.TestCase):
    def setUp(self):
        self.msg = Message()

    def test_simple(self):
        addHeaders(self.msg, "From", "To", "Subject")
        self.assertEqual(invokeEmail2PDF(self.msg), 0)

    def test_nosubject(self):
        addHeaders(self.msg, "From", "To")
        self.assertEqual(invokeEmail2PDF(self.msg), 0)

    def test_plaincontent(self):
        addHeaders(self.msg, "From", "To", "Subject")
        setPlainContent(self.msg, "Hello!")
        self.assertEqual(invokeEmail2PDF(self.msg), 0)

    def test_plaincontent_headers(self):
        addHeaders(self.msg, "From", "To", "Subject")
        setPlainContent(self.msg, "Hello!")
        self.assertEqual(invokeEmail2PDF(self.msg, True), 0)

    def tearDown(self):
        time.sleep(DELAY)


class TestMIME(unittest.TestCase):
    def setUp(self):
        self.msg = MIMEMultipart()

    def test_simple(self):
        addHeaders(self.msg, "From", "To", "Subject")
        self.assertEqual(invokeEmail2PDF(self.msg), 0)

    def test_nosubject(self):
        addHeaders(self.msg, "From", "To")
        self.assertEqual(invokeEmail2PDF(self.msg), 0)

    def test_plain(self):
        addHeaders(self.msg, "From", "To", "Subject")
        attachText(self.msg, "Some basic textual content")
        self.assertEqual(invokeEmail2PDF(self.msg), 0)

    def test_html(self):
        addHeaders(self.msg, "From", "To", "Subject")
        attachHTML(self.msg, "<p>Some basic textual content</p>")
        self.assertEqual(invokeEmail2PDF(self.msg), 0)

    def test_plainandhtml(self):
        addHeaders(self.msg, "From", "To", "Subject")
        attachText(self.msg, "Some basic textual content")
        attachHTML(self.msg, "<p>Some basic textual content</p>")
        self.assertEqual(invokeEmail2PDF(self.msg), 0)

    def tearDown(self):
        time.sleep(DELAY)

if __name__ == '__main__':
    unittest.main()
