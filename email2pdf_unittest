#!/usr/bin/env python3

from email.message import Message
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
from email.utils import formatdate
from subprocess import Popen, PIPE, DEVNULL
from reportlab.pdfgen import canvas

import os
import sys
import tempfile
import time
import unittest

DELAY = 0.5

error_log = open('email2pdf_unittest_stderr.log', "w")


def touch(fname):
    open(fname, 'w').close()


def addHeaders(msg, frm=None, to=None, subject=None):
    if(subject):
        msg['Subject'] = subject

    if(frm):
        msg['From'] = frm

    if(to):
        msg['To'] = to

    msg['Date'] = formatdate()


def invokeEmail2PDF(message, headers=False, outputDirectory="/tmp", errorExpected=False, outputFile=None):
    textMessage = message.as_string()

    options = ['./email2pdf', '-d', outputDirectory]
    if headers:
        options.append('--headers')

    if outputFile:
        options.append('-o')
        options.append(outputFile)

    if errorExpected:
        p = Popen(options, stdin=PIPE, stderr=error_log)
    else:
        p = Popen(options, stdin=PIPE)

    output = p.communicate(input=bytes(textMessage, 'UTF-8'))
    p.wait()
    return p.returncode


def setPlainContent(message, content):
    message.set_default_type("text/plain")
    message.set_payload(content)


def attachHTML(message, content):
    message.attach(MIMEText(content, 'html'))


def attachText(message, content):
    message.attach(MIMEText(content, 'plain'))


def attachPDF(message, string):
    unused_f_handle, file_name = tempfile.mkstemp(prefix="email2pdf_unittest_file", suffix=".pdf")

    try:
        cv = canvas.Canvas(file_name)
        cv.drawString(0, 500, string)
        cv.save()

        part = MIMEBase('application', "pdf")
        openHandle = open(file_name, "rb")
        part.set_payload(openHandle.read())
        encoders.encode_base64(part)
        part.add_header('Content-Disposition', 'attachment; filename="%s"' % os.path.basename(file_name))
        message.attach(part)
        openHandle.close()

        return file_name
    finally:
        os.unlink(file_name)


class TestBasic(unittest.TestCase):
    def setUp(self):
        self.msg = Message()

    def test_simple(self):
        addHeaders(self.msg, "From", "To", "Subject")
        self.assertEqual(invokeEmail2PDF(self.msg), 0)

    def test_nosubject(self):
        addHeaders(self.msg, "From", "To")
        self.assertEqual(invokeEmail2PDF(self.msg), 0)

    def test_plaincontent(self):
        addHeaders(self.msg, "From", "To", "Subject")
        setPlainContent(self.msg, "Hello!")
        self.assertEqual(invokeEmail2PDF(self.msg), 0)

    def test_plaincontent_headers(self):
        addHeaders(self.msg, "From", "To", "Subject")
        setPlainContent(self.msg, "Hello!")
        self.assertEqual(invokeEmail2PDF(self.msg, True), 0)

    def test_plaincontent_trailingslash(self):
        setPlainContent(self.msg, "Hello!")
        self.assertEqual(invokeEmail2PDF(self.msg, outputDirectory="/tmp/"), 0)

    def test_plaincontent_dirnotexist(self):
        setPlainContent(self.msg, "Hello!")
        self.assertNotEqual(invokeEmail2PDF(self.msg, outputDirectory="/notexist/", errorExpected=True), 0)

    def test_plaincontent_fileexist(self):
        setPlainContent(self.msg, "Hello!")
        unused_f_handle, f_path = tempfile.mkstemp()
        try:
            self.assertNotEqual(invokeEmail2PDF(self.msg, outputFile=f_path, errorExpected=True), 0)
        finally:
            os.unlink(f_path)

    def tearDown(self):
        time.sleep(DELAY)


class TestMIME(unittest.TestCase):
    def setUp(self):
        self.msg = MIMEMultipart()

    def test_simple(self):
        addHeaders(self.msg, "From", "To", "Subject")
        self.assertEqual(invokeEmail2PDF(self.msg), 0)

    def test_nosubject(self):
        addHeaders(self.msg, "From", "To")
        self.assertEqual(invokeEmail2PDF(self.msg), 0)

    def test_plain(self):
        addHeaders(self.msg, "From", "To", "Subject")
        attachText(self.msg, "Some basic textual content")
        self.assertEqual(invokeEmail2PDF(self.msg), 0)

    def test_html(self):
        addHeaders(self.msg, "From", "To", "Subject")
        attachHTML(self.msg, "<p>Some basic textual content</p>")
        self.assertEqual(invokeEmail2PDF(self.msg), 0)

    def test_plainandhtml(self):
        addHeaders(self.msg, "From", "To", "Subject")
        attachText(self.msg, "Some basic textual content")
        attachHTML(self.msg, "<p>Some basic textual content</p>")
        self.assertEqual(invokeEmail2PDF(self.msg), 0)

    def test_pdf(self):
        addHeaders(self.msg, "From", "To", "Subject")
        attachText(self.msg, "Some basic textual content")
        filename = attachPDF(self.msg, "Some PDF content")
        self.assertEqual(invokeEmail2PDF(self.msg), 0)
        self.assertTrue(os.path.exists(filename))

    def test_2pdfs(self):
        addHeaders(self.msg, "From", "To", "Subject")
        attachText(self.msg, "Some basic textual content")
        filename = attachPDF(self.msg, "Some PDF content")
        filename2 = attachPDF(self.msg, "Some More PDF content")
        self.assertFalse(os.path.exists(filename))
        self.assertFalse(os.path.exists(filename2))

        self.assertEqual(invokeEmail2PDF(self.msg), 0)
        self.assertTrue(os.path.exists(filename))
        self.assertTrue(os.path.exists(filename2))

    def test_pdf_exists(self):
        addHeaders(self.msg, "From", "To", "Subject")
        attachText(self.msg, "Some basic textual content")
        filename = attachPDF(self.msg, "Some PDF content")
        self.assertFalse(os.path.exists(filename))

        touch(filename)
        self.assertEqual(invokeEmail2PDF(self.msg), 0)
        self.assertTrue(os.path.exists(filename))

        dirName, baseName = os.path.split(filename)
        rootName, unused_extension = os.path.splitext(baseName)
        uniqueName = os.path.join(dirName, rootName + "_1.pdf")

        self.assertTrue(os.path.exists(uniqueName))

    def test_2pdfs_oneexists(self):
        addHeaders(self.msg, "From", "To", "Subject")
        attachText(self.msg, "Some basic textual content")
        filename = attachPDF(self.msg, "Some PDF content")
        filename2 = attachPDF(self.msg, "Some More PDF content")
        self.assertFalse(os.path.exists(filename))
        self.assertFalse(os.path.exists(filename2))

        touch(filename)
        self.assertEqual(invokeEmail2PDF(self.msg), 0)

        self.assertTrue(os.path.exists(filename))
        dirName, baseName = os.path.split(filename)
        rootName, unused_extension = os.path.splitext(baseName)
        uniqueName = os.path.join(dirName, rootName + "_1.pdf")
        self.assertTrue(os.path.exists(uniqueName))

        self.assertTrue(os.path.exists(filename2))
        dirName2, baseName2 = os.path.split(filename2)
        rootName2, unused_extension2 = os.path.splitext(baseName2)
        uniqueName2 = os.path.join(dirName2, rootName2 + "_1.pdf")
        self.assertFalse(os.path.exists(uniqueName2))

    def tearDown(self):
        time.sleep(DELAY)

if __name__ == '__main__':
    unittest.main()
